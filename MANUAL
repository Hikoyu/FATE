========================================
Abridged User's Manual of FATE ver.1.4.2
========================================

System Requirements
-------------------
macOS or Linux


Software Requirements
---------------------
perl		5.8 or later
blast+		2.2.30 or later	ftp://ftp.ncbi.nlm.nih.gov/blast/executables/LATEST/
exonerate	2.4.0		ftp://ftp.ebi.ac.uk/pub/software/vertebrategenomics/exonerate/
wise2		2.4.1		http://www.ebi.ac.uk/~birney/wise2/


Installation
------------
Move "fate.pl" to any directory in the PATH.
Other required softwares (blast+ etc.) have to be also installed and be in the PATH.

Wise2 is difficult to install.
If you cannot install wise2 by yourself, try "wise2_installer.sh" as follows:
$ mv wise2_installer.sh /any/where/wise2.4.1/
$ cd /any/where/wise2.4.1/
$ ./wise2_installer.sh

This installer requires clang, pkg-config, and glib2.
You can easily install above packages via apt or yum in the Linux system.
If your system is macOS, MacPorts or Homebrew are helpful to install above packages.
MacPorts	https://www.macports.org
Homebrew	http://brew.sh

Wise2 requires environment variable 'WISECONFIGDIR'.
For example, you have to add a line to "~/.bash_profile" as below (if your default shell is bash).

export WISECONFIGDIR="/any/where/wise2.4.1/wisecfg"


Quick Start
-----------
General usage is as below.

$ fate.pl <command> [option] [input] [> output] [2> log]

If you omit the command, FATE outputs its version and available commands.

$ fate.pl
fate.pl ver.1.4.2

Functions:
  FATE is Framework for Annotating Translatable Exons.
  This software annotates protein-coding genes by a classical homology-based method.

Usage:
  fate.pl <command>

Command:
  filter	Filter already annotated protein-coding genes under specified conditions
  search	Search protein-coding genes under specified conditions

[search]
fate.pl search

Functions:
  Search protein-coding genes under specified conditions.

Usage:
  fate.pl search [options] <genome.fa> <STDIN | in1.fa> [in2.fa ...] [> out.bed | > out.gtf]

Options:
  -3 INT 	Length of 3' flanking region <0-> [300]
  -5 INT 	Length of 5' flanking region <0-> [300]
  -b PATH 	Path to blast output file (-outfmt 6) to reuse
  -c NUM 	Minimum query coverage to regard as complete CDS <0-1> [0.85]
  -f STR 	Output format <bed|gtf> [bed]
  -g STR 	Gene prediction engine <exonerate|genewise>
  -h STR 	Homology search engine <tblastn|tblastn-fast|blastn|dc-megablast|megablast> [blastn]
  -i INT 	Maximum interval length allowed to assemble initial hits [100000]
  -l INT 	Minimum length to regard as complete CDS <0-> [0]
  -n STR 	Prefix of each locus name [locus]
  -o INT 	Maximum overlap/gap length of query boundries allowed to assemble initial hits [30]
  -p INT 	Number of parallel processes <1-> [1]
  -s		Force GT-AG rule for splice junctions
  -t INT 	Output biotype (+1:functional genes, +2:truncated genes, +4:pseudogenes) <1-7> [7]
  -v INT 	Maximum number of candidate isoforms <1->

Examples:
1. Search genome database using nucleotide queries via megablast, then output CDS loci. 
$ fate.pl search -h megablast genome.fa in.fa > out.bed

2. Search genome database using amino acid queries via tblastn and perform gene prediction via exonerate, then output CDS loci.
$ fate.pl search -h tblastn -g exonerate genome.fa in.fa > out.bed

3. Reuse the output file of homology search and perform gene prediction via wise2, then output CDS loci in gtf format.
$ fate.pl search -b fate_search.out -g genewise genome.fa in.fa > out.bed

4. Search genome database using nucleotide queries via blastn and perform gene prediction via exonerate, then output CDS (functional genes only) loci.
$ fate.pl search -h blastn -g exonerate -t 1 genome.fa in.fa > out.bed

Note: The colors in the 9th column of bed format output by FATE indicate biotypes: functional genes by "blue", truncated genes by "yellow", and pseudogenes by "red", respectively.

5. Search genome database using amino acid queries via tblastn and perform gene prediction via wise2, then output CDS loci including up to 3 candidate isoforms.
$ fate.pl search -h tblastn -g genewise -v 3 genome.fa in.fa > out.bed

[filter]
fate.pl filter

Functions:
  Filter already annotated protein-coding genes under specified conditions.

Usage:
  fate.pl filter [options] <genome.fa> <STDIN | in1.bed> [in2.bed ...] [> out.bed | > out.gtf]

Options:
  -b PATH 	Path to blast output file (-outfmt 6) to reuse
  -d PATH 	Path to gene or protein database file (fasta format)
  -f STR 	Output format <bed|gtf> [bed]
  -h STR 	Homology search engine <blastx|blastx-fast|blastn|dc-megablast|megablast> [blastx]
  -k STR 	Keywords for filtering (AND[&], OR[;], BUT[!])
  -n STR 	Prefix of each locus name [locus]
  -p INT 	Number of parallel processes <1-> [1]
  -r INT 	Cutoff rank of hits <1->
  -t INT 	Output biotype (+1:functional genes, +2:truncated genes, +4:pseudogenes) <1-7> [7]
  -v INT 	Maximum number of candidate isoforms <1->

Examples:
1. Search protein database using the sequences of defined loci in the input bed file via blastx, then output the loci which get the hits including 'keyword' in the top 5.
$ fate.pl filter -d protein.fa -h blastx -k 'keyword' -r 5 genome.fa in.bed > out.bed

Note: For example, keyword 'hoge&piyo;!foo&!bar' means including both 'hoge' and 'piyo' or including neither 'foo' nor 'bar'.

2. Search nucleotide database using the sequences of defined loci in the input file via blastn, then output the loci which get the hits including 'keyword' in the top 5.
$ fate.pl filter -d nucleotide.fa -h blastn -k 'keyword' -r 5 genome.fa in.bed > out.bed

3. Reuse the output file of homology search, then output the loci which get the hits including 'keyword' in the top 5.
$ fate.pl filter -b fate_filter.out -k 'keyword' -r 5 genome.fa in.bed > out.bed

Note: FATE outputs the results of homology search in customized TSV format (-outfmt '6 std salltitles') as default.

4. Output only functional gene loci in gtf format.
$ fate.pl filter -f gtf -t 1 genome.fa in.bed > out.gtf


Tips
----
1. FATE does not output DNA sequences. If you want, use 'getfasta' command in bedtools.
bedtools	http://bedtools.readthedocs.io

2. You can use the results of blast search executed independently of FATE. Specify '-b' followed by blast output file in the TSV format (-outfmt 6). When you execute 'filter' command, ghostx/ghostz output file is also available. 
ghostx	http://www.bi.cs.titech.ac.jp/ghostx
ghostz	http://www.bi.cs.titech.ac.jp/ghostz

3. FATE use environment variable 'BLASTDB' if defined. So, you can omit the PATH prefix of genome/protein sequence file. For example, instead of writing as follows:
$ fate.pl filter -d /path/to/protdb/protein.fa -h blastx -k 'keyword' -r 5 /path/to/genomedb/genome.fa in.bed > out.bed

you can simply write as follows:
$ fate.pl filter -d protein.fa -h blastx -k 'keyword' -r 5 genome.fa in.bed > out.bed

if you defined 'BLASTDB' as follows:
$ export BLASTDB="/path/to/protdb:/path/to/genomedb"


License
-------
FATE is released under the MIT License.
See also LICENSE.


Bug Reporting
-------------
If you find bugs, please let me know.
Email: suzuki.hikoyu@gmail.com
